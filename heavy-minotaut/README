############################################################################################
#											   #
#                          	Heavy MinOTAut						   #
#		- Heavy Minimization algorithms for Tree Automata			   #
#											   #
#	Copyright (c) 2014-16	Ricardo Almeida	(LFCS - University of Edinburgh)	   #
#											   #
############################################################################################



Downloading
===========

To download Heavy MinOTAut, run

$ git clone https://github.com/ric-almeida/heavy-minotaut.git


Installation
============

1) Install libvata (see ../ondrik-libvata/README for more info; an additional prerequisite of libvata is g++ >= 4.8.0)

2) Run $ make minotaut


Input Format
============

libvata so far supports only the Timbuk format of tree automata. The format is
specified by the following grammar with the start symbol <file>:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  <file>            : 'Ops' <label_list> <automaton>

  <label_list>      : <label_decl> <label_decl> ... // a list of label declarations

  <label_decl>      : string ':' int // a symbol declaration (the name and the arity)

  <automaton>       : 'Automaton' string 'States' <state_list> 'Final States' <state_list> 'Transitions' <transition_list>

  <state_list>      : <state> <state> ... // a list of states

  <state>           : string // the name of a state

  <transition_list> : <transition> <transition> ... // a list of transitions

  <transition>      : <label> '(' <state> ',' <state> ',' ... ')' '->' <state> // a transition

  <label>           : string // the name of a label

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An example could look like this:

~~~~~~~~~~~~~~~~~~~~~
Ops a:0 b:1 c:2

Automaton A
States q0 q1 q2
Final States q2 
Transitions
a() -> q0
b(q0) -> q1
c(q1, q1) -> q1
c(q1, q1) -> q2
c(q2, q2) -> q2
~~~~~~~~~~~~~~~~~~~~~


Usage
=====

Please use one of the following: 

 	 - './minotaut minimize [ options ] la-dw la-up i_dir1 i_dir2 ...' to apply Heavy(la-dw,la-up) to each automaton (with timbuk syntax) in the dirs provided. 
	 Options are as follows: 
		 - [-output=o_dir]: if provided, each automaton from a file named ta.timbuk will be minimized and saved in the output_dir as a file named ta_minimized_with_Heavy(x,y).timbuk (default: no output). 
		 - [-max_numb_tests=n]: to limit to n the number of automata to process in each i_dir. 
		 - [-timeout=t]: to limit to t seconds each application of the Heavy algorithm (default: 1800). 
		 - [-BranchPR=d]: to set to d the depth of the pre-refinement performed before each computation of the lookahead downward simulation. (advanced) 

	 - './minotaut minimize_and_complement [ options ] la-dw la-up i_dir1 i_dir2 ...' to apply Heavy(la-dw,la-up) to each automaton (as described in the 'minimize' option) in the input dirs provided, and complement them using libvata's algorithm. For most automata, the minimization speeds up significantly the complement operation. 
	 Options are as follows: 
		 - [-output=o_dir]: if provided, each automaton from a file named ta.timbuk will be minimized and complemented and saved in the output_dir as a file named ta_minimized_with_Heavy(x,y)_and_complemented.timbuk (default: no output). 
		 - [-max_numb_tests=n]: to limit to n the number of automata to process in each i_dir. 
		 - [-timeout=t]: to limit to t seconds each application of the Heavy algorithm (default: 1800). 
		 - [-BranchPR=d]: to set to d the depth of the pre-refinement performed before each computation of the lookahead downward simulation. (advanced) 


Publications
============

- R. Almeida, L. Holik, R. Mayr. Reduction of Non-deterministic Tree Automata. TACAS'16.
